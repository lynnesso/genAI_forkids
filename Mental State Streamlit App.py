import streamlit as st
import torch
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from torch import nn

st.title("üéì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç—Å–∫–∏—Ö —Å–µ–∫—Ü–∏–π")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
age = st.slider("–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞", 5, 17, 9)
budget = st.slider("–ë—é–¥–∂–µ—Ç –Ω–∞ —Å–µ–∫—Ü–∏–∏ (—Ä—É–±/–º–µ—Å)", 0, 20000, 5000)
interests = st.selectbox("–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–µ—Å", ["—Å–ø–æ—Ä—Ç", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–ª–æ–≥–∏–∫–∞", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"])
direction = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è", ["—Å–ø–æ—Ä—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "STEM"])
district = st.selectbox("–†–∞–π–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–Æ–∂–Ω—ã–π", "–°–µ–≤–µ—Ä–Ω—ã–π", "–ó–∞–ø–∞–¥–Ω—ã–π", "–í–æ—Å—Ç–æ—á–Ω—ã–π"])

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
data = pd.DataFrame({
    "age": [7, 9, 10, 8, 6, 11],
    "interests": ["—Å–ø–æ—Ä—Ç", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–ª–æ–≥–∏–∫–∞", "—Å–ø–æ—Ä—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "—Å–ø–æ—Ä—Ç"],
    "direction": ["—Å–ø–æ—Ä—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "STEM", "—Å–ø–æ—Ä—Ç", "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "STEM"],
    "budget": [3000, 4000, 6000, 5000, 2500, 7000],
    "district": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–Æ–∂–Ω—ã–π", "–ó–∞–ø–∞–¥–Ω—ã–π", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–°–µ–≤–µ—Ä–Ω—ã–π"],
    "target_section": ["–∞–π–∫–∏–¥–æ", "—Ä–∏—Å–æ–≤–∞–Ω–∏–µ", "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", "–±–∞—Å–∫–µ—Ç–±–æ–ª", "–ª–µ–ø–∫–∞", "—à–∞—Ö–º–∞—Ç—ã"]
})

cat_features = data[["interests", "direction", "district"]]
num_features = data[["age", "budget"]]
target = data["target_section"]

enc = OneHotEncoder()
scaled = StandardScaler()
target_enc = OneHotEncoder()

X_cat = enc.fit_transform(cat_features).toarray()
X_num = scaled.fit_transform(num_features)
X = np.concatenate([X_num, X_cat], axis=1)

target_enc.fit(target.values.reshape(-1, 1))
y = target_enc.transform(target.values.reshape(-1, 1)).toarray()

# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_df = pd.DataFrame([[age, budget, interests, direction, district]],
                       columns=["age", "budget", "interests", "direction", "district"])
user_num = scaled.transform(user_df[["age", "budget"]])
user_cat = enc.transform(user_df[["interests", "direction", "district"]]).toarray()
user_input = torch.tensor(np.concatenate([user_num, user_cat], axis=1), dtype=torch.float32)

# –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
class Generator(nn.Module):
    def __init__(self, noise_dim, cond_dim, output_dim):
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(noise_dim + cond_dim, 64),
            nn.ReLU(),
            nn.Linear(64, output_dim),
            nn.Softmax(dim=1)
        )
    def forward(self, noise, cond):
        x = torch.cat([noise, cond], dim=1)
        return self.model(x)

cond_dim = X.shape[1]
output_dim = y.shape[1]
noise_dim = 10
G = Generator(noise_dim, cond_dim, output_dim)
# ‚ö†Ô∏è –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—É—á–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
    noise = torch.randn(1, noise_dim)
    with torch.no_grad():
        output = G(noise, user_input)
    recommendation = target_enc.inverse_transform(output.detach().numpy())[0][0]
    st.success(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–µ–∫—Ü–∏—è: **{recommendation}**")
